import { HttpStatus, Inject, Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { CustomHttpException } from 'src/common/exceptions';
import { PaginationResponseModel, SearchPaginationResponseModel } from 'src/common/models';
import { VaccineAppointment, VaccineAppointmentDocument } from './vaccine-appoinments.schema';
import { CheckVaccineAppointmentDTO, CreateVaccineAppointmentDTO, SearchVaccineAppointmentDTO, UpdateVaccineAppointment } from './dto';
import { AppointmentStatus, PostVaccinationStatus, Role } from 'src/common/enums';
import { IUser } from '../users/users.interface';
import { Cache, CACHE_MANAGER } from '@nestjs/cache-manager';
import { ExtendedChangeStreamDocument } from 'src/common/types/extendedChangeStreamDocument.interface';
import { UpdatePostVaccineDTO } from './dto/checkVaccine.dto';
import { formatDateTime } from 'src/utils/helpers';
import { Queue } from 'bull';
import { InjectQueue } from '@nestjs/bull';
import { Student, StudentDocument } from '../students/students.schema';
import { VaccineEvent } from '../vaccine-events/vaccine-events.schema';

@Injectable()
export class VaccineAppoimentsService implements OnModuleInit {
    constructor(
        @InjectModel(VaccineAppointment.name) private vaccineAppointmentModel: Model<VaccineAppointmentDocument>,
        @Inject(CACHE_MANAGER) private cacheManager: Cache,
        @InjectQueue('mailQueue') private readonly mailQueue: Queue,
        @InjectModel(Student.name) private studentModel: Model<StudentDocument>,
        @InjectModel(VaccineEvent.name) private vaccineEventModel: Model<VaccineEvent>,
    ) { }

    async onModuleInit() {
        console.log('üöÄ Change Streams cho Vaccine Appointments ƒë√£ kh·ªüi ƒë·ªông');

        this.vaccineAppointmentModel.watch().on('change', async (change: ExtendedChangeStreamDocument<any>) => {
            console.log('üì© Nh·∫≠n s·ª± ki·ªán Change Stream cho Vaccine Appointments:', change);

            const operationType = change.operationType;
            const documentKey = change.documentKey;

            if (!documentKey) return;

            const appointmentId = documentKey._id?.toString();
            if (!appointmentId) return;

            console.log(`üìù Thao t√°c: ${operationType}, Appointment ID: ${appointmentId}`);

            if (['insert', 'update', 'replace', 'delete'].includes(operationType)) {
                await this.cacheManager.del(`vaccineAppointment:${appointmentId}`);
                console.log(`üóëÔ∏è ƒê√£ xo√° cache vaccineAppointment:${appointmentId}`);

                const searchKeys = (await this.cacheManager.get('vaccineAppointments:search:keys')) as string[] || [];
                for (const key of searchKeys) {
                    await this.cacheManager.del(key);
                    console.log(`üóëÔ∏è ƒê√£ xo√° cache ${key}`);
                }

                await this.cacheManager.del('vaccineAppointments:search:keys');
                console.log('üßπ ƒê√£ xo√° to√†n b·ªô cache li√™n quan ƒë·∫øn t√¨m ki·∫øm vaccine appointments');
            }
        });
    }

    async create(payload: CreateVaccineAppointmentDTO): Promise<VaccineAppointment> {
        const existing = await this.vaccineAppointmentModel.findOne({ studentId: payload.studentId, isDeleted: false });
        if (existing) {
            throw new CustomHttpException(HttpStatus.CONFLICT, 'ƒê∆°n ƒë√£ t·ªìn t·∫°i');
        }

        const item = new this.vaccineAppointmentModel(payload);
        return await item.save();
    }

    async findOne(id: string): Promise<VaccineAppointment> {
        const cacheKey = `vaccineAppointment:${id}`;
        const cachedAppointment = await this.cacheManager.get(cacheKey);
        if (cachedAppointment) {
            console.log('‚úÖ L·∫•y vaccine appointment t·ª´ cache');
            return cachedAppointment as VaccineAppointment;
        }

        const item = await this.vaccineAppointmentModel
            .findById(id, { isDeleted: false })
            .setOptions({ strictPopulate: false })
            .populate('checkedBy')
            .populate('student')
            .populate('event');
        if (!item) {
            throw new CustomHttpException(HttpStatus.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán');
        }

        await this.cacheManager.set(cacheKey, item, 60);
        console.log('‚úÖ ƒê√£ l∆∞u vaccine appointment v√†o cache');
        return item;
    }

    async update(id: string, data: UpdateVaccineAppointment): Promise<VaccineAppointment> {
        const updated = await this.vaccineAppointmentModel.findOneAndUpdate(
            { _id: id, isDeleted: false },
            { $set: data },
            { new: true }
        );

        if (!updated) {
            throw new CustomHttpException(HttpStatus.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y h·ªçc sinh');
        }
        return updated;
    }

    async search(params: SearchVaccineAppointmentDTO): Promise<SearchPaginationResponseModel<VaccineAppointment>> {
        const cacheKey = `vaccineAppointments:search:${JSON.stringify(params)}`;
        const cached = await this.cacheManager.get(cacheKey);
        if (cached) {
            console.log('‚úÖ L·∫•y k·∫øt qu·∫£ t√¨m ki·∫øm t·ª´ cache');
            return cached as SearchPaginationResponseModel<VaccineAppointment>;
        }

        const { pageNum, pageSize, query, eventId, studentId, checkBy, schoolYear, status, isDeleted } = params;
        const filters: any = { isDeleted: false };

        if (isDeleted === 'true') filters.isDeleted = true;
        if (isDeleted === 'false') filters.isDeleted = false;

        if (query?.trim()) {
            filters.bloodPressure = { $regex: query, $options: 'i' };
        }
        if (eventId?.trim()) {
            if (Types.ObjectId.isValid(eventId)) {
                filters.eventId = new Types.ObjectId(eventId.trim());
            } else {
                throw new Error('Invalid eventId');
            }
        }
        if (studentId?.trim()) {
            if (Types.ObjectId.isValid(studentId)) {
                filters.studentId = new Types.ObjectId(studentId.trim());
            } else {
                throw new Error('Invalid studentId');
            }
        }
        if (checkBy?.trim()) filters.checkedBy = checkBy;
        if (schoolYear?.trim()) filters.schoolYear = schoolYear;
        if (status?.trim()) {
            filters.status = status.trim();
        }

        const totalItems = await this.vaccineAppointmentModel.countDocuments(filters);
        const items = await this.vaccineAppointmentModel
            .find(filters)
            .skip((pageNum - 1) * pageSize)
            .setOptions({ strictPopulate: false })
            .limit(pageSize)
            .sort({ createdAt: -1 })
            .populate('checkedBy')
            .populate('student')
            .populate('event')
            .lean();

        const pageInfo = new PaginationResponseModel(pageNum, pageSize, totalItems);
        const result = new SearchPaginationResponseModel(items, pageInfo);

        await this.cacheManager.set(cacheKey, result, 60);

        const keys = (await this.cacheManager.get('vaccineAppointments:search:keys')) as string[] || [];
        if (!keys.includes(cacheKey)) {
            keys.push(cacheKey);
            await this.cacheManager.set('vaccineAppointments:search:keys', keys, 60);
        }

        console.log('‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ t√¨m ki·∫øm v√†o cache');
        return result;
    }

    async remove(id: string): Promise<boolean> {
        const item = await this.vaccineAppointmentModel.findOne({ _id: id, isDeleted: false });
        if (!item) {
            throw new CustomHttpException(HttpStatus.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y hoc sinh');
        }
        await this.vaccineAppointmentModel.findByIdAndUpdate(id, { isDeleted: true });
        return true;
    }

    async nurseCheckAppointment(
        id: string,
        user: IUser,
        data: CheckVaccineAppointmentDTO
    ) {
        if (user.role !== Role.School_Nurse) {
            throw new CustomHttpException(HttpStatus.FORBIDDEN, 'Kh√¥ng th·ªÉ x√≥a n·∫øu kh√¥ng ph·∫£i y t√°');
        }

        const appo = await this.vaccineAppointmentModel.findOne({ _id: id, isDeleted: false });
        if (!appo) throw new CustomHttpException(HttpStatus.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');

        const nurseId = user._id;
        appo.checkedBy = new Types.ObjectId(nurseId);
        appo.bloodPressure = data.bloodPressure;
        appo.isEligible = data.isEligible;
        appo.notes = data.notes;

        // L·∫•y th√¥ng tin student + event + vaccineType
        const [student, event] = await Promise.all([
            this.studentModel.findById(appo.studentId)
                .populate('parents.userId')
                .lean(),
            this.vaccineEventModel.findById(appo.eventId)
                .populate('vaccineTypeId') // populate ƒë·ªÉ l·∫•y t√™n vaccine
                .lean(),
        ]);

        if (!student || !event) {
            throw new CustomHttpException(HttpStatus.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y h·ªçc sinh ho·∫∑c s·ª± ki·ªán');
        }

        // L·∫•y t√™n vaccine t·ª´ vaccineType
        const vaccineTypeName =
            (event.vaccineTypeId as any)?.name || 'Vaccine kh√¥ng x√°c ƒë·ªãnh';

        if (!data.isEligible) {
            appo.status = AppointmentStatus.Ineligible;
            appo.reasonIfIneligible = data.reasonIfIneligible || 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ti√™m';
            appo.vaccinatedAt = undefined;

            if (Array.isArray(student.parents)) {
                for (const parentInfo of student.parents) {
                    const parent = parentInfo.userId as any;
                    if (parent?.email) {
                        const subject = `Th√¥ng b√°o k·∫øt qu·∫£ ki·ªÉm tra ti√™m vaccine`;
                        const html = `
<div style="max-width:480px;margin:0 auto;padding:24px 16px;background:#f9f9f9;border-radius:8px;font-family:Arial,sans-serif;border:1px solid #e0e0e0;">
  <h2 style="color:#d32f2f;">H·ªçc sinh ${student.fullName} kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ti√™m vaccine</h2>
  <table style="width:100%;border-collapse:collapse;margin:16px 0;">
    <tr>
      <td style="padding:6px 0;color:#555;"><b>Lo·∫°i vaccine:</b></td>
      <td style="padding:6px 0;">${vaccineTypeName}</td>
    </tr>
    <tr>
      <td style="padding:6px 0;color:#555;"><b>Th·ªùi gian s·ª± ki·ªán:</b></td>
      <td style="padding:6px 0;">${formatDateTime(event.eventDate)}</td>
    </tr>
    <tr>
      <td style="padding:6px 0;color:#555;"><b>L√Ω do:</b></td>
      <td style="padding:6px 0;">${appo.reasonIfIneligible}</td>
    </tr>
  </table>
  <p style="margin:16px 0 24px 0;font-size:16px;color:#333;">
    Vui l√≤ng li√™n h·ªá nh√† tr∆∞·ªùng ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt ho·∫∑c l·ªãch h·∫πn ti√™m b·ªï sung.
  </p>
</div>`;
                        await this.mailQueue.add('send-vaccine-mail', {
                            to: parent.email,
                            subject,
                            html,
                        });
                    }
                }
            }
        } else {
            if (data.vaccinatedAt) {
                appo.status = AppointmentStatus.Vaccinated;
                appo.vaccinatedAt = data.vaccinatedAt;
                appo.reasonIfIneligible = undefined;
            } else {
                appo.status = AppointmentStatus.Checked;
                appo.vaccinatedAt = undefined;
                appo.reasonIfIneligible = undefined;
            }
        }

        await appo.save();
        return appo;
    }


    async updatePostVaccinationStatus(
        id: string,
        body: UpdatePostVaccineDTO
    ): Promise<VaccineAppointment> {
        const appo = await this.vaccineAppointmentModel
            .findOne({ _id: id, isDeleted: false })
            .populate('student')
            .populate('event')
            .lean();

        if (!appo) {
            throw new CustomHttpException(HttpStatus.NOT_FOUND, 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn');
        }

        // Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t khi ƒë√£ ti√™m vaccine
        if (appo.status !== AppointmentStatus.Vaccinated) {
            throw new CustomHttpException(
                HttpStatus.BAD_REQUEST,
                'Ch·ªâ c·∫≠p nh·∫≠t t√¨nh tr·∫°ng sau ti√™m khi ƒë√£ ti√™m vaccine',
            );
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† ghi ch√∫ sau ti√™m
        await this.vaccineAppointmentModel.findByIdAndUpdate(id, {
            postVaccinationStatus: body.postVaccinationStatus,
            postVaccinationNotes: body.postVaccinationNotes,
        });

        // L·∫•y l·∫°i th√¥ng tin student v√† event + vaccineType
        const [student, event] = await Promise.all([
            this.studentModel
                .findById(appo.studentId)
                .populate('parents.userId')
                .lean() as any,
            this.vaccineEventModel
                .findById(appo.eventId)
                .populate('vaccineTypeId') // Populate ƒë·ªÉ l·∫•y t√™n vaccine
                .lean(),
        ]);

        if (student && Array.isArray(student.parents) && event) {
            // L·∫•y t√™n vaccine t·ª´ vaccineType
            const vaccineTypeName =
                (event.vaccineTypeId as any)?.name || 'Vaccine kh√¥ng x√°c ƒë·ªãnh';

            for (const parentInfo of student.parents) {
                const parent = parentInfo.userId;
                if (parent?.email) {
                    const subject = `K·∫øt qu·∫£ theo d√µi sau ti√™m cho h·ªçc sinh ${student.fullName}`;
                    const html = `
<div style="max-width:600px;margin:0 auto;padding:24px;background:#f9f9f9;border-radius:8px;font-family:Arial,sans-serif;border:1px solid #ddd;">
  <h2 style="color:#1976d2;text-align:center;">Th√¥ng b√°o k·∫øt qu·∫£ theo d√µi sau ti√™m</h2>
  <p style="font-size:16px;color:#333;">K√≠nh g·ª≠i ph·ª• huynh,</p>
  <p style="font-size:16px;color:#333;">Nh√† tr∆∞·ªùng xin g·ª≠i k·∫øt qu·∫£ theo d√µi sau ti√™m c·ªßa h·ªçc sinh:</p>

  <table style="width:100%;border-collapse:collapse;margin:16px 0;font-size:14px;">
    <tr>
      <td style="padding:6px 8px;color:#555;width:30%;"><b>H·ªçc sinh:</b></td>
      <td style="padding:6px 8px;color:#333;">${student.fullName}</td>
    </tr>
    <tr>
      <td style="padding:6px 8px;color:#555;"><b>Lo·∫°i vaccine:</b></td>
      <td style="padding:6px 8px;color:#333;">${vaccineTypeName}</td>
    </tr>
    <tr>
      <td style="padding:6px 8px;color:#555;"><b>S·ª± ki·ªán:</b></td>
      <td style="padding:6px 8px;color:#333;">${event.title}</td>
    </tr>
    <tr>
      <td style="padding:6px 8px;color:#555;"><b>Ng√†y ti√™m:</b></td>
      <td style="padding:6px 8px;color:#333;">${event.eventDate ? formatDateTime(event.eventDate) : ''}</td>
    </tr>
    <tr>
      <td style="padding:6px 8px;color:#555;"><b>ƒê·ªãa ƒëi·ªÉm:</b></td>
      <td style="padding:6px 8px;color:#333;">${event.location}</td>
    </tr>
    <tr>
      <td style="padding:6px 8px;color:#555;"><b>Nh√† cung c·∫•p:</b></td>
      <td style="padding:6px 8px;color:#333;">${event.provider}</td>
    </tr>
    <tr>
      <td style="padding:6px 8px;color:#555;"><b>T√¨nh tr·∫°ng sau ti√™m:</b></td>
      <td style="padding:6px 8px;color:#333;">${body.postVaccinationStatus}</td>
    </tr>
    <tr>
      <td style="padding:6px 8px;color:#555;"><b>Ghi ch√∫:</b></td>
      <td style="padding:6px 8px;color:#333;">${body.postVaccinationNotes || 'Kh√¥ng c√≥ ghi ch√∫'}</td>
    </tr>
  </table>

  <p style="margin:16px 0;font-size:15px;color:#333;">
    Nh√† tr∆∞·ªùng s·∫Ω ti·∫øp t·ª•c theo d√µi t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa h·ªçc sinh. N·∫øu c√≥ b·∫•t th∆∞·ªùng, ph·ª• huynh vui l√≤ng li√™n h·ªá ngay v·ªõi nh√† tr∆∞·ªùng ho·∫∑c c∆° s·ªü y t·∫ø.
  </p>

  <p style="font-size:12px;color:#888;text-align:center;">
    Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.
  </p>
</div>
                `;

                    await this.mailQueue.add('send-vaccine-mail', {
                        to: parent.email,
                        subject,
                        html,
                    });
                }
            }
        }

        return await this.vaccineAppointmentModel.findById(id);
    }


}